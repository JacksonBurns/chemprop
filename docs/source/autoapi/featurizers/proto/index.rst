:py:mod:`featurizers.proto`
===========================

.. py:module:: featurizers.proto


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   featurizers.proto.MolGraphFeaturizerProto




.. py:class:: MolGraphFeaturizerProto


   Bases: :py:obj:`Protocol`

   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing), for example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto(Protocol[T]):
           def meth(self) -> T:
               ...

   .. py:property:: shape
      :type: tuple[int, int]

      the feature dimensions of the atoms and bonds, respectively, of `MolGraph`s generated by
      this featurizer

   .. py:method:: __call__(*args, **kwargs) -> chemprop.v2.featurizers.molgraph.MolGraph



