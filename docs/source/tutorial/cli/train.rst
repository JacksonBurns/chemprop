.. _train:

Training a Chemprop Model
=========================

To train a model, run:

.. code-block::
   chemprop train --data-path <input_path> --task-type <type> --output-dir <dir>

where ``<input_path>`` is the path to a CSV file containing a dataset, ``<type>`` is the type of modeling task (including "classification" and "regression", but also "spectral", "multiclass" and others), and ``<dir>`` is the directory where model checkpoints will be saved.

For example:

.. code-block::
    chemprop train --data-path data/tox21.csv \
        --task-type classification \
        --output-dir tox21_checkpoints

A full list of available command-line arguments can be found in :ref:`cmd`.


Input Data
----------

In order to train a model, you must provide training data containing molecules (as SMILES strings) and known target values. Targets can either be real numbers, if performing regression, or binary (i.e. 0s and 1s), if performing classification. Target values which are unknown can be left as blanks. A model can be trained as either single- or multi-task.

The data file must be be a **CSV file with a header row**. For example:

.. code-block::
   smiles,NR-AR,NR-AR-LBD,NR-AhR,NR-Aromatase,NR-ER,NR-ER-LBD,NR-PPAR-gamma,SR-ARE,SR-ATAD5,SR-HSE,SR-MMP,SR-p53
   CCOc1ccc2nc(S(N)(=O)=O)sc2c1,0,0,1,,,0,0,1,0,0,0,0
   CCN1C(=O)NC(c2ccccc2)C1=O,0,0,0,0,0,0,0,,0,,0,0
   ...

By default, it is assumed that the SMILES are in the first column and the targets are in the remaining columns. However, the specific columns containing the SMILES and targets can be specified using the :code:`--smiles-columns <column>` and :code:`--target-columns <column_1> <column_2> ...` flags, respectively.

Datasets from `MoleculeNet <http://moleculenet.ai/>`_ and a 450K subset of ChEMBL from `<http://www.bioinf.jku.at/research/lsc/index.html>`_ have been preprocessed and are available in `data.tar.gz <https://github.com/chemprop/chemprop/blob/master/data.tar.gz>`_. To uncompress them, run :code:`tar xvzf data.tar.gz`.

Notes:

* The default metric for classification is ROC and the default metric for regression is RMSE. Other metrics may be specified with ``--metrics METRIC``.

Train/Validation/Test Splits
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Our code supports several methods of splitting data into train, validation, and test sets.

* **Random:** By default, the data will be split randomly into train, validation, and test sets.

* **Scaffold:** Alternatively, the data can be split by molecular scaffold so that the same scaffold never appears in more than one split. This can be specified by adding :code:`--split-type scaffold_balanced`.

* **Separate val/test:** If you have separate data files you would like to use as the validation or test set, you can specify them with :code:`--separate-val-path <val_path>` and/or :code:`--separate-test-path <test_path>`.

*Note*: By default, both random and scaffold split the data into 80% train, 10% validation, and 10% test. This can be changed with :code:`--split-sizes <train_frac> <val_frac> <test_frac>`. The default setting is :code:`--split-sizes 0.8 0.1 0.1`. Both splits also involve a random component that can be seeded with :code:`--seed <seed>`. The default setting is :code:`--seed 0`.

Other supported splitting methods include :code:`cv`, :code:`cv_no_val`, :code:`random_with_repeated_smiles`, :code:`kennard_stone`, and :code:`kmeans`.

Cross Validation
^^^^^^^^^^^^^^^^

k-fold cross-validation can be run by specifying :code:`--num-folds <k>` (default 1).

Ensembling
^^^^^^^^^^

To train an ensemble, specify the number of models in the ensemble with :code:`--ensemble-size <n>` (default 1).


Additional Features
^^^^^^^^^^^^^^^^^^^

While the model works very well on its own, especially after hyperparameter optimization, additional features may further improve performance on certain datasets. The additional features can be added at the atom-, bond, or molecule-level. Molecule-level features can be either automatically generated by RDKit or custom features provided by the user.

Molecule-Level 2D Features
""""""""""""""""""""""""""""""""

Morgan fingerprints can be generated as molecular 2D features using :code:`--features-generators`:

* :code:`morgan_binary` binary Morgan fingerprints, radius 2 and 2048 bits.
* :code:`morgan_count` count-based Morgan, radius 2 and 2048 bits.

Molecule-Level Custom Features
""""""""""""""""""""""""""""""

If you install from source, you can modify the code to load custom features as follows:

1. **Generate features:** If you want to generate features in code, you can write a custom features generator function in :code:`chemprop/features/features-generators.py`. Scroll down to the bottom of that file to see a features generator code template.
2. **Load features:** If you have features saved as a numpy :code:`.npy` file or as a :code:`.csv` file, you can load the features by using :code:`--features-path /path/to/features`. Note that the features must be in the same order as the SMILES strings in your data file. Note that :code:`.csv` files must have a header row and the features should be comma-separated with one line per molecule.

Atom-Level Features
"""""""""""""""""""

Similar to the additional molecular features described above, you can also provide additional atomic features via :code:`--atom-descriptors-path /path/to/features` with valid file formats:

* :code:`.npz` file, where descriptors are saved as 2D array for each molecule in the exact same order as the SMILES strings in your data file.
* :code:`.pkl` / :code:`.pckl` / :code:`.pickle` containing a pandas dataframe with smiles as index and numpy array of descriptors as columns.
* :code:`.sdf` containing all mol blocks with descriptors as entries.

The order of the descriptors for each atom per molecule must match the ordering of atoms in the RDKit molecule object. 

The command line option :code:`--atom-descriptors-path /path/to/descriptors` concatenates the new features to the embedded atomic features after the D-MPNN with an additional linear layer. The option :code:`--atom_descriptors feature` concatenates the features to each atomic feature vector before the D-MPNN, so that they are used during message-passing. Alternatively, the user can overwrite the default atom features with the custom features using the option :code:`--overwrite-default-atom-features`.

Similar to the molecule-level features, the atom-level descriptors and features are scaled by default. This can be disabled with the option :code:`--no-atom-descriptor-scaling`

Bond-Level Features
"""""""""""""""""""

Bond-level features can be provided in the same format as the atom-level features, using the option :code:`--bond-features-path /path/to/features`. The order of the features for each molecule must match the bond ordering in the RDKit molecule object.

The bond-level features are concatenated with the bond feature vectors before the D-MPNN, such that they are used during message-passing. Alternatively, the user can overwrite the default bond features with the custom features using the option :code:`--overwrite-default-bond-features`.

Similar to molecule-, and atom-level features, the bond-level features are scaled by default. This can be disabled with the option :code:`--no-bond-descriptor-scaling`.

Reaction
^^^^^^^^

Chemprop can also process atom-mapped reaction SMILES (see `Daylight manual <https://www.daylight.com/meetings/summerschool01/course/basics/smirks.html>`_ for details), which consist of three parts denoting reactants, agents, and products, each separated by ">". For exampel, an atom-mapped reaction SMILES denoting the reaction of methanol to formaldehyde without hydrogens: :code:`[CH3:1][OH:2]>>[CH2:1]=[O:2]` and with hydrogens: :code:`[C:1]([H:3])([H:4])([H:5])[O:2][H:6]>>[C:1]([H:3])([H:4])=[O:2].[H:5][H:6]`. The reactions do not need to be balanced and can thus contain unmapped parts, for example leaving groups, if necessary.

Use the option :code:`--reaction` to enable this, which transforms the reactants and products to the corresponding condensed graph of reaction, and changes the initial atom and bond features depending on the argument provided to :code:`--reaction-mode`:

* :code:`reac_diff`: from the reactant and the difference upon reaction (default)
* :code:`reac_prod`: from both the reactant and product
* :code:`prod_diff`: from the product and the difference upon reaction

Each of these arguments can be modified to balance imbalanced reactions by appending "_balance", e.g. :code:`reac_diff_balance`. 

In reaction mode, Chemprop concatenates information to each atomic and bond feature vector. For example, using :code:`--reaction-mode reac_prod`, each atomic feature vector holds information on the state of the atom in the reactant (similar to default Chemprop), and concatenates information on the state of the atom in the product. Agents are discarded. Functions incompatible with a reaction as input (scaffold splitting and feature generation) are carried out on the reactants only. 

If the atom-mapped reaction SMILES contain mapped hydrogens, enable explicit hydrogens via :code:`--keep-h`.

For further details and benchmarking, as well as a citable reference, please see `DOI 10.33774/chemrxiv-2021-frfhz <https://doi.org/10.33774/chemrxiv-2021-frfhz>`_.

Pretraining
^^^^^^^^^^^

An existing model, for example from training on a larger, lower quality dataset, can be used for parameter-initialization of a new model by providing a checkpoint of the existing model using either:

 * :code:`--checkpoint-dir <dir>` Directory where the model checkpoint(s) are saved (i.e. :code:`--save_dir` during training of the old model). This will walk the directory, and load all :code:`.pt` files it finds.
 * :code:`--checkpoint-path <path>` Path to a model checkpoint file (:code:`.pt` file).
when training the new model. The model architecture of the new model should resemble the architecture of the old model - otherwise some or all parameters might not be loaded correctly. Please note that the old model is only used to initialize the parameters of the new model, but all parameters remain trainable (no frozen layers). Depending on the quality of the old model, the new model might only need a few epochs to train.

.. note:: 
    This section is under development.

It is possible to freeze the weights of the model during training, such as for transfer learning applications. The following flags may be used:

 * :code:`--frzn-ffn-layers <n>`  
 * :code:`--model-frzn <path_to_checkpoint>`   
 * :code:`--freeze-first-only`  


Missing target values
^^^^^^^^^^^^^^^^^^^^^

When training multitask models (models which predict more than one target simultaneously), sometimes not all target values are known for all molecules in the dataset. Chemprop automatically handles missing entries in the dataset by masking out the respective values in the loss function, so that partial data can be utilized. 

The loss function is rescaled according to all non-missing values, and missing values do not contribute to validation or test errors. Training on partial data is therefore possible and encouraged (versus taking out datapoints with missing target entries). No keyword is needed for this behavior, it is the default.

..
   TensorBoard
   ^^^^^^^^^^^

   During training, TensorBoard logs are automatically saved to the same directory as the model checkpoints. To view TensorBoard logs, run :code:`tensorboard --logdir=<dir>` where :code:`<dir>` is the path to the checkpoint directory. Then navigate to `<http://localhost:6006>`_.
